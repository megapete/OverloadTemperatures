//
//  C57_91_Functions.h
//  OverloadTemperatures
//
//  Created by Peter Huber on 2022-12-12.
//

#ifndef C57_91_Functions_h
#define C57_91_Functions_h

#include <stdio.h>

// The different cooling types
typedef enum {
    
    ONAN,
    ONAF,
    OFAF,
    ODAF
    
} PCH_CoolingTypes;

// The different winding conductor types
typedef enum {
    
    CU,
    AL
    
} PCH_ConductorTypes;

// The different fluids
typedef enum {
    
    MINERAL_OIL,
    SILICON_OIL
    
} PCH_FluidTypes;

// Functions
// G.1: Hottest-spot temperature
double Theta_H(double theta_A, double delta_theta_BO, double delta_theta_WOoverBO, double delta_theta_HoverWO);

// G.2: Bottom Oil Temperature
double Theta_BO(double theta_AO, double delta_theta_ToverB);

// G.3: Top Oil Temperature
double Theta_TO(double theta_AO, double delta_theta_ToverB);

// G.4: Heat generated by the windings from time t1 to t2
double Q_GEN_w(double K, double Kw, double Pe, double Pw, double delta_T);

// G.5: Temperature Correction for Winding Losses
double Kw(double theta_W_R, double theta_W_1, double theta_K);

// G.6: The heat lost by the windings (NOTE: The standard defines a G.6A for ONAN, ONAF, and OFAF and G.6B for ODAF. This function requires the cooling type as an input to the routine and does the correct calculation accordingly)
double QLOST_W(PCH_CoolingTypes cType, double Pe, double Pw, double theta_DAO_1, double theta_DAO_R, double theta_W_1, double theta_W_R, double delta_T, double mu_W_1, double mu_W_R);

// G.7: The mass and thermal capacitance of the windings
double MCp_W(double Pw, double Pe, double tau_W, double theta_DAO_R, double theta_W_R);

// G.8: The average winding temperature at time t = t2
double Theta_W_2(double QGEN_W, double QLOST_W, double MCp_W, double theta_W_1);

// G.9: Winding duct oil temperature rise over bottom oil
double Delta_Theta_DOoverBO(double QLOST_W, double x, double delta_T, double Pw, double Pe, double theta_TDO_R, double theta_BO_R);

// G.10: The oil temperature at the hot-spot elevation
double Delta_Theta_WOoverBO(double HHS, double theta_BO, double theta_TDO);

// G.11: The temperature of oil adjacent to winding hot spot (NOTE: This routine combines G.11A and G.11B into a single function.)
double Theta_WO(double theta_TDO, double theta_TO, double theta_BO, double theta_WOoverBO);

// G.12 & G.13: Correct the winding losses from average winding temperature to hot-spot temperature. NOTE: The function expects a pointer to a two-element array of doubles. On exit, the first entry is the hot-spot I2R loss (G.12) and the second entry is the hot-spot eddy loss (G.13).
void P_TOTAL_HS(double Pw, double theta_H_R, double theta_W_R, double theta_K, double EHS, double *totalLoss);

// G.14: Heat generated at the hot-spot temperature.
double Q_GEN_HS(double K, double KHS, double PHS, double PEHS, double delta_T);

// G.15: Temperature correction for losses at hot-spot location
double KHS(double theta_H_1, double theta_H_R, double theta_K);

// G.16: The heat lost at the hot-spot location (NOTE: The standard defines a G.16A for ONAN, ONAF, and OFAF and G.16B for ODAF. We require the cooling type as an input to the routine and call the correct function accordingly. ALSO, functionally, this equation is identical to G.6, so this routine just calls QLOST_W.)
double QLOST_HS(PCH_CoolingTypes cType, double PEHS, double PHS, double theta_H_1, double theta_H_R, double theta_WO, double theta_WO_R, double delta_T, double mu_HS_1, double mu_HS_R);

// G.17: The winding hotspot temperature at time t2 (NOTE: This routine is functionally equivalent to G.8 so the underlying routine just calls that.)
double Theta_H_2(double QGEN_HS, double QLOST_HS, double MCp_W, double theta_H_1);

// G.18: Heat generated by the core (NOTE: The standard creates a distinction between the heat generated by the core under normal conditions and when it is overexcited. We only create a single function here, and it s the calling routine's responsibility to pass the correct core loss to this routine.)
double QC(double PC, double delta_T);

// G.19: Heat generated by the stray loss
double QS(double K, double KW, double PS, double delta_T);

// G.20 Total loss
double PT(double PW, double PE, double PS, double PC);

// G.21 Heat lost by the oil
double QLOST_O(double theta_AO_1, double theta_A_1, double theta_AO_R, double theta_A_R, double y, double PT, double delta_T);

// G.22 Mass of windings (transformer manufacturer would already have this data - ie: it would not need to be calculated)
double MW(double MCpW, double CpW);

// G.23 Mass of core (transformer manufacturer would already have this data - ie: it would not need to be calculated)
double MCORE(double MCC, double MW);

// G.24: Total mass times specific heat of oil, tank, and core
double SumMCp(double MTANK, double CPTANK, double MCORE, double CPCORE, double MOIL, double CPOIL);

// Average oil temperature at time t2
double Theta_AO_2(double QLOST_W, double QS, double QC, double QLOST_O, double theta_AO_1, double SumMCp);

// G.26 Temperature rise of top-oil (radiator) over bottom-oil
double Delta_Theta_ToverB(double QLOST_O, double PT, double delta_T, double z, double theta_TO_R, double theta_BO_R);

#endif /* C57_91_Functions_h */
